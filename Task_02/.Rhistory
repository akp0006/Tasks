install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
z
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
bye()
library(swirl)
swirl()
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args()
args(list.files)
old.dir<-"C:/Users/Abbey/Documents"
old.dir<-getwd()
dir.create()
dir.create(testdir)
dir.create(getwd)
dir.create(old.dir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R to mytest2.R")
file.rename("mytest.R" "to" "mytest2.R")
file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2") file.path('testdir2', 'testdir3')
dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
q()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c()
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,
dimnames = NULL)
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-vect[c("Bill","Gina","Kelly","Sean")]
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!5==!7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>5)
which('ints>7')
ints>7
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(standard deviation, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x+2},6)
evaluate(function(x){x[1])
evaluate(function(x){x[1]})
evaluate(function(x){x[1]},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
telegram("Jesus","Christ","Superstar")
submit()
submit()
submit()
submit()
mad_libs(bathroom, evil, bread)
mad_libs("bathroom", "evil", "bread")
submit()
"I" %p% "love" %p% "R!"
data(cars)
cars
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist,y=cars$speed)
?plot
plot(x=cars$speed, y=cars$dist, xlab = Speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15)
plot
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
setwd("C:\Users\Abbey\Desktop\Evolution\Tasks\Task_02")
setwd("C:\\Users\\Abbey\\Desktop\\Evolution\\Tasks\\Task_02")
beren3 <- read.csv("C:\\Users\\Abbey\\Desktop\\Evolution\\Tasks\\Task_02\\beren_new.csv", stringsAsFactors=F)
beren3
which(beren3$event == "trait_mass")
Feeds <- which(beren3[,9] == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgMilk
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
avgFeed
head(avgFeed)
length(avgFeed)
ncol(avgFeed)
nrow(avgFeed)
ncol(avgFeed)
avgFeed[1:74,]
avgFeed[2,]
head(beren3)
colnames(avgFeed)
class(avgFeed)
?array
dim(avgFeed)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
totalFeed
numFeeds
varFeed
?cor
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
berenANOVA
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")
Feeds
?par
options("device")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
length(totalFeed)
?dev.off
source("http://jonsmitchell.com/code/plotFxn02b.R")
unique(beren3$event)
berenMilk
Naps <- which(beren3[,9] == "nap")
?object
beren4 <- beren3[Naps,]
beren4
length(beren4)
?cbind
class(beren4)
?ISOdatetime
StartHour <- which(beren4[,5])
StartHour <- beren4[,5]
StartMinute <- beren4[,6]
StartMinute
berenNapStart <- beren4[StartHour, StartMinute]
berenNSHour <- beren4[StartHour]
berenNSHour <- beren4[StartHour,]
berenNSHour
nrow(beren4)
beren4[1:118, 5]
beren4[,5]
beren4
napstart <- beren4[,5]
napstartmin <- beren4[,6]
NStimestamp <- paste(napstart, ":", napstartmin, sep="")
NStimestamp
class(NStimestamp)
sapply(strsplit(NStimestamp,":"), function(x) {x <- as.numeric(x) x[1]+x[2]/60}
sapply(strsplit(NStimestamp,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
napend <- beren4[,7]
napendmin <- beren4[,8]
NEtimestamp <- paste(napend,":", napendmin, sep="")
NEtimestamp
sapply(strsplit(NEtimestamp,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
NEtimestamp - NStimestamp
final[complete.cases(final[ , 7:8]),]
beren5 <- beren4
beren4[complete.cases(beren4[ , 7:8]),]
napstart2 <- beren4[,5]
napstartmin2 <- beren4[,6]
NStimestamp2 <- paste(napstart2, ":", napstartmin2, sep="")
NStimestamp2
sapply(strsplit(NStimestamp2,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
napend2 <- beren4[,7]
napendmin2 <- beren4[,8]
NEtimestamp2 <- paste(napend2,":", napendmin2, sep="")
sapply(strsplit(NEtimestamp2,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
beren6 <-  beren4[complete.cases(beren4[ , 7:8]),]
beren6
napstart3 <- beren6[,5]
napstartmin3 <- beren6[,6]
NStimestamp3 <- paste(napstart3, ":", napstartmin3, sep="")
NStimestamp3
sapply(strsplit(NStimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
napend3 <- beren6[,7]
napendmin3 <- beren6[,8]
NEtimestamp3 <- paste(napend3,":", napendmin3, sep="")
sapply(strsplit(NEtimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
NEtimestamp3 - NStimestamp3
class(NEtimestamp3)
?as.numeric
?-
?operator
NE_num <- as.numeric(NEtimestamp3)
NEtimestamp3
NE_dec <- sapply(strsplit(NEtimestamp3,":"),
+        function(x) {
+            x <- as.numeric(x)
+            x[1]+x[2]/60
+        }
+ )
NE_dec <- sapply(strsplit(NEtimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
NE_dec
?operator
se
fd
sapply(strsplit(NEtimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
)}
NE_dec <- sapply(strsplit(NEtimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
NE_dec
class(NE_dec)
NS_dec <- sapply(strsplit(NStimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
class(NS_dec)
NE_dec - NS_dec
timeeachnap <- NE_dec - NS_dec
beren6
class(timeeachnap)
totalNap <- tapply(beren6[timeeachnap], beren6$age, sum)
cbind(beren6, timeeachnap)
beren6
beren7 <- cbind(beren6, timeeachnap)
beren7
totalNap <- tapply(beren7$timeeachnap, beren6$age, sum)
totalNap
length(totalNap)
length(beren7)
nrow(beren7)
plot(as.numeric(names(totalNap)), totalNap, type="b", pch=16, xlab="age in days", ylab="total time slept (hours)")
NStimestamp3
class(NEtimestamp3)
NS_dec
beren8 <- cbind(beren7, NS_dec)
beren8
cor.test(beren8$timeeachnap, beren8$NS_dec)
berenCorr <- cor.test(beren8$timeeachnap, beren8$NS_dec)
berenCorr
