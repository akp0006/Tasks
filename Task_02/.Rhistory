install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
z
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
bye()
library(swirl)
swirl()
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args()
args(list.files)
old.dir<-"C:/Users/Abbey/Documents"
old.dir<-getwd()
dir.create()
dir.create(testdir)
dir.create(getwd)
dir.create(old.dir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R to mytest2.R")
file.rename("mytest.R" "to" "mytest2.R")
file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2") file.path('testdir2', 'testdir3')
dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
q()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c()
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,
dimnames = NULL)
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-vect[c("Bill","Gina","Kelly","Sean")]
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!5==!7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>5)
which('ints>7')
ints>7
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(standard deviation, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x+2},6)
evaluate(function(x){x[1])
evaluate(function(x){x[1]})
evaluate(function(x){x[1]},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
telegram("Jesus","Christ","Superstar")
submit()
submit()
submit()
submit()
mad_libs(bathroom, evil, bread)
mad_libs("bathroom", "evil", "bread")
submit()
"I" %p% "love" %p% "R!"
data(cars)
cars
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist,y=cars$speed)
?plot
plot(x=cars$speed, y=cars$dist, xlab = Speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15)
plot
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
setwd("C:\\Users\\Abbey\\Desktop\\Evolution\\Tasks\\Task_02")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)
write.csv(Data, "rawdata.csv", quote=F)
Data
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3, 4]
Data[1:5, 1:3]
Data[257, 1:3]
Feeds <- which(Data[,9] == "bottle")
berenMilk <- Data[Feeds,]
head(berenMilk)
Feeds <- which(Data[,"event"] == "bottle")
Feeds <- which(Data$event == "bottle")
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data$age <- dateID - dateID[which(Data$event == "birth")]
head(Data)
beren2 <- Data
beren3 <- beren2[order(beren2$age),]
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
Naps <- which(beren3[,9] == "nap")
beren4 <- beren3[Naps,]
beren6 <-  beren4[complete.cases(beren4[ , 7:8]),]
napstart3 <- beren6[,5]
napstartmin3 <- beren6[,6]
NStimestamp3 <- paste(napstart3, ":", napstartmin3, sep="")
NStimestamp3
NS_dec <- sapply(strsplit(NStimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
napend3 <- beren6[,7]
napendmin3 <- beren6[,8]
NEtimestamp3 <- paste(napend3,":", napendmin3, sep="")
NE_dec <- sapply(strsplit(NEtimestamp3,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
NE_dec - NS_dec
timeeachnap <- NE_dec - NS_dec
beren7 <- cbind(beren6, timeeachnap)
totalNap <- tapply(beren7$timeeachnap, beren7$age, sum)
beren_totalNap <- totalNap
Beren_napsubsettime <- subset(beren4, start_hour >= 10 & start_hour < 14)
nrow(Beren_napsubsettime)
berenMilk2 <- which(beren3$event == "bottle")
beren_Milk <- beren3[berenMilk2,]
Beren_milksubsettime2 <- subset(beren_Milk, start_hour >= 10 & start_hour < 14)
totalFeed2 <- tapply(Beren_milksubsettime2$value, Beren_milksubsettime2$age, sum)
totalNap2 <- tapply(beren7_subsettime$timeeachnap, beren7_subsettime$age, sum)
totalFeed2 <- tapply(Beren_milksubsettime2$value, Beren_milksubsettime2$age, sum)
beren7_subsettime <- subset(beren7, start_hour >= 10 & start_hour < 14)
totalNap2 <- tapply(beren7_subsettime$timeeachnap, beren7_subsettime$age, sum)
merge(totalNap2, totalFeed2)
totalNap2
totalFeed2
merge(totalNap2, totalFeed2, all = TRUE)
tapply(Beren_milksubsettime2$value, Beren_milksubsettime2$age)
setdiff(totalFeed2, totalNap2)
setdiff(totalNap2, totalFeed2)
str(totalNap2)
str(totalFeed2)
Beren_milksubsettime2
?merge
merge(totalNap2, totalFeed2, by.TotalFeed2)
merge(totalNap2, totalFeed2, by.totalFeed2)
merge(totalNap2, totalFeed2, by totalFeed2)
merge(totalNap2, totalFeed2, by = totalFeed2)
merge(totalNap2, totalFeed2, all.y)
merge(totalNap2, totalFeed2, all = totalFeed2)
tapply(Beren_milksubsettime2$value, Beren_milksubsettime2$age, sum)
class(totalFeed2)
class(totalNap2)
str(totalFeed2)
dim(totalFeed2)
totalFeed2[,,2]
matrix(totalFeed2, ncol = 2)
?matrix
matrix(totalFeed2, ncol=1)
TF2_matrix <- matrix(totalFeed2, ncol=1)
TN2_matrix <- matrix(totalNap2, ncol=1)
TN2_matrix
merge(TTF2_matrix,TN2_matrix)
merge(TF2_matrix,TN2_matrix)
?cbind
Beren_napsubsettime
data.frame(TF2_matrix,TN2_matrix,row.names = "milk consumed","time napped")
data.frame(TF2_matrix,TN2_matrix,row.names=c("milk consumed","time napped"))
cbind(TF2_matrix,TN2_matrix)
intersect(Beren_milksubsettime2, beren7_subsettime)
?vector
totalNap2
totalFeed2
TF2_matrix
TN2_matrix
tN2_matrix <- TN2_matrix[c(1:41,44:61),]
tN2_matrix
tF2_matrix <- TF2_matrix[c(1:18,21,24:25,28:29,31:41,45:48,50:70),]
tF2_matrix
length(tF2_matrix)
length(tN2_matrix)
scatter.smooth(x=tN2_matrix, y=tF2_matrix, main="Milk ~ Nap")
title(main="Milk consumption as a function of time napped", xlab="Time spent napping per day (hrs)", ylab="Milk consumed per day (oz)")
scatter.smooth(x=tN2_matrix, y=tF2_matrix, main="Milk consumption as a function of time napped", xlab="Time spent napping per day (hrs)", ylab="Milk consumed per day (oz)")
