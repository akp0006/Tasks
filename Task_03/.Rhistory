install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
z
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
bye()
library(swirl)
swirl()
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args()
args(list.files)
old.dir<-"C:/Users/Abbey/Documents"
old.dir<-getwd()
dir.create()
dir.create(testdir)
dir.create(getwd)
dir.create(old.dir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R to mytest2.R")
file.rename("mytest.R" "to" "mytest2.R")
file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2") file.path('testdir2', 'testdir3')
dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
q()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c()
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,
dimnames = NULL)
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-vect[c("Bill","Gina","Kelly","Sean")]
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!5==!7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>5)
which('ints>7')
ints>7
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(standard deviation, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x+2},6)
evaluate(function(x){x[1])
evaluate(function(x){x[1]})
evaluate(function(x){x[1]},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
telegram("Jesus","Christ","Superstar")
submit()
submit()
submit()
submit()
mad_libs(bathroom, evil, bread)
mad_libs("bathroom", "evil", "bread")
submit()
"I" %p% "love" %p% "R!"
data(cars)
cars
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist,y=cars$speed)
?plot
plot(x=cars$speed, y=cars$dist, xlab = Speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15)
plot
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
setwd("C:\\Users\\Abbey\\Desktop\\Evolution\\Tasks\\Task_03")
library(rebird)
birds <- ebirdfreq("states", "US-WV", 2019, 2019, 1, 12)
a.goldfinch <- which(birds[,1] == "American Goldfinch")
a.gold <- birds[a.goldfinch,]
firstWeek <- a.gold[a.gold$monthQt %in% c("January-1", "February-1", "March-1", "April-1", "May-1", "June-1", "July-1", "August-1", "September-1", "October-1", "November-1", "December-1"),]
crows <- which(birds[,1] == "American Crow")
a.crow <- birds[crows,]
firstWeekCrow <- a.crow[a.crow$monthQt %in% c("January-1", "February-1", "March-1", "April-1", "May-1", "June-1", "July-1", "August-1", "September-1", "October-1", "November-1", "December-1"),]
AcceptDataFinch <- read.table(text="
monthQt     frequency
1 January-1       0.244
2 February-1      0.242
3 March-1         0.263
4 April-1         0.321
5 May-1           0.346
6 June-1          0.376
7 July-1          0.457
8 August-1        0.596
9 September-1     0.548
10 October-1       0.295
11 November-1      0.336
12 December-1      0.370", stringsAsFactors=FALSE)
plot(frequency~factor(monthQt, levels=c("January-1", "February-1", "March-1", "April-1", "May-1", "June-1", "July-1", "August-1", "September-1", "October-1", "November-1", "December-1")), AcceptDataFinch, type="p", pch=15, las=2,
xlab="", main="Frequencies in WV during the first week of each month in 2019")
AcceptDataCrow <- read.table(text="
monthQt     frequency
1 January-1       0.389
2 February-1      0.437
3 March-1         0.426
4 April-1         0.410
5 May-1           0.360
6 June-1          0.382
7 July-1          0.394
8 August-1        0.438
9 September-1     0.455
10 October-1       0.451
11 November-1      0.498
12 December-1      0.387", stringsAsFactors=FALSE)
points(frequency~factor(monthQt, levels=c("January-1", "February-1", "March-1", "April-1", "May-1", "June-1", "July-1", "August-1", "September-1", "October-1", "November-1", "December-1")), AcceptDataCrow, type = "p", pch=0, col = "red")
legend("topleft", legend=c("Am. Goldfinch", "Am. Crow"), fill=c("black", "red"), cex=0.5, bty="n")
